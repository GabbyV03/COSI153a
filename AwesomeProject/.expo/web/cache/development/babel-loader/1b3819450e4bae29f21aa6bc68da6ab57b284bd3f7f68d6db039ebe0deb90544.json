{"ast":null,"code":"import { runOnJS, useAnimatedReaction, useDerivedValue, useSharedValue } from \"react-native-reanimated\";\nimport { useSafeNestableScrollContainerContext } from \"../context/nestableScrollContainerContext\";\nimport { SCROLL_POSITION_TOLERANCE } from \"../constants\";\nexport function useNestedAutoScroll(params) {\n  var _useSafeNestableScrol = useSafeNestableScrollContainerContext(),\n    outerScrollOffset = _useSafeNestableScrol.outerScrollOffset,\n    containerSize = _useSafeNestableScrol.containerSize,\n    scrollableRef = _useSafeNestableScrol.scrollableRef,\n    scrollViewSize = _useSafeNestableScrol.scrollViewSize;\n  var DUMMY_VAL = useSharedValue(0);\n  var _params$hoverOffset = params.hoverOffset,\n    hoverOffset = _params$hoverOffset === void 0 ? DUMMY_VAL : _params$hoverOffset,\n    _params$activeCellSiz = params.activeCellSize,\n    activeCellSize = _params$activeCellSiz === void 0 ? DUMMY_VAL : _params$activeCellSiz,\n    _params$autoscrollSpe = params.autoscrollSpeed,\n    autoscrollSpeed = _params$autoscrollSpe === void 0 ? 100 : _params$autoscrollSpe,\n    _params$autoscrollThr = params.autoscrollThreshold,\n    autoscrollThreshold = _params$autoscrollThr === void 0 ? 30 : _params$autoscrollThr,\n    _params$isDraggingCel = params.isDraggingCell,\n    isDraggingCell = _params$isDraggingCel === void 0 ? DUMMY_VAL : _params$isDraggingCel,\n    _params$isTouchActive = params.isTouchActiveNative,\n    isTouchActiveNative = _params$isTouchActive === void 0 ? DUMMY_VAL : _params$isTouchActive;\n  var hoverScreenOffset = useDerivedValue(function () {\n    return hoverOffset.value - outerScrollOffset.value;\n  }, []);\n  var isScrolledUp = useDerivedValue(function () {\n    return outerScrollOffset.value - SCROLL_POSITION_TOLERANCE <= 0;\n  }, []);\n  var isScrolledDown = useDerivedValue(function () {\n    return outerScrollOffset.value + containerSize.value + SCROLL_POSITION_TOLERANCE >= scrollViewSize.value;\n  }, []);\n  var distToTopEdge = useDerivedValue(function () {\n    return Math.max(0, hoverScreenOffset.value);\n  }, [hoverScreenOffset]);\n  var distToBottomEdge = useDerivedValue(function () {\n    var dist = containerSize.value - (hoverScreenOffset.value + activeCellSize.value);\n    return Math.max(0, dist);\n  }, [hoverScreenOffset, activeCellSize, containerSize]);\n  var isAtTopEdge = useDerivedValue(function () {\n    return distToTopEdge.value <= autoscrollThreshold;\n  }, []);\n  var isAtBottomEdge = useDerivedValue(function () {\n    return distToBottomEdge.value <= autoscrollThreshold;\n  });\n  var scrollTarget = useSharedValue(0);\n  useAnimatedReaction(function () {\n    return isDraggingCell.value;\n  }, function (cur, prev) {\n    if (cur && !prev) {\n      scrollTarget.value = outerScrollOffset.value;\n    }\n  }, [activeCellSize]);\n  function scrollToInternal(y) {\n    var _scrollableRef$curren;\n    (_scrollableRef$curren = scrollableRef.current) === null || _scrollableRef$curren === void 0 ? void 0 : _scrollableRef$curren.scrollTo({\n      y: y,\n      animated: true\n    });\n  }\n  useDerivedValue(function () {\n    var isAtEdge = isAtTopEdge.value || isAtBottomEdge.value;\n    var topDisabled = isAtTopEdge.value && isScrolledUp.value;\n    var bottomDisabled = isAtBottomEdge.value && isScrolledDown.value;\n    var isEdgeDisabled = topDisabled || bottomDisabled;\n    var scrollTargetDiff = Math.abs(scrollTarget.value - outerScrollOffset.value);\n    var scrollInProgress = scrollTargetDiff > SCROLL_POSITION_TOLERANCE;\n    var shouldScroll = isAtEdge && !isEdgeDisabled && isDraggingCell.value && isTouchActiveNative.value && !scrollInProgress;\n    var distFromEdge = isAtTopEdge.value ? distToTopEdge.value : distToBottomEdge.value;\n    var speedPct = 1 - distFromEdge / autoscrollThreshold;\n    var offset = speedPct * autoscrollSpeed;\n    var targetOffset = isAtTopEdge.value ? Math.max(0, outerScrollOffset.value - offset) : outerScrollOffset.value + offset;\n    if (shouldScroll) {\n      scrollTarget.value = targetOffset;\n      runOnJS(scrollToInternal)(targetOffset);\n    }\n  }, [autoscrollSpeed, autoscrollThreshold, isDraggingCell]);\n  return null;\n}","map":{"version":3,"names":["runOnJS","useAnimatedReaction","useDerivedValue","useSharedValue","useSafeNestableScrollContainerContext","SCROLL_POSITION_TOLERANCE","useNestedAutoScroll","params","_useSafeNestableScrol","outerScrollOffset","containerSize","scrollableRef","scrollViewSize","DUMMY_VAL","_params$hoverOffset","hoverOffset","_params$activeCellSiz","activeCellSize","_params$autoscrollSpe","autoscrollSpeed","_params$autoscrollThr","autoscrollThreshold","_params$isDraggingCel","isDraggingCell","_params$isTouchActive","isTouchActiveNative","hoverScreenOffset","value","isScrolledUp","isScrolledDown","distToTopEdge","Math","max","distToBottomEdge","dist","isAtTopEdge","isAtBottomEdge","scrollTarget","cur","prev","scrollToInternal","y","_scrollableRef$curren","current","scrollTo","animated","isAtEdge","topDisabled","bottomDisabled","isEdgeDisabled","scrollTargetDiff","abs","scrollInProgress","shouldScroll","distFromEdge","speedPct","offset","targetOffset"],"sources":["/Users/gabriellavukomanovic/Desktop/Summer2023/AwesomeProject/node_modules/react-native-draggable-flatlist/lib/module/hooks/useNestedAutoScroll.tsx"],"sourcesContent":["import Animated, {\n  runOnJS,\n  useAnimatedReaction,\n  useDerivedValue,\n  useSharedValue,\n} from \"react-native-reanimated\";\nimport { State as GestureState } from \"react-native-gesture-handler\";\nimport { useSafeNestableScrollContainerContext } from \"../context/nestableScrollContainerContext\";\nimport { SCROLL_POSITION_TOLERANCE } from \"../constants\";\n\n// This is mostly copied over from the main react-native-draggable-flatlist\n// useAutoScroll hook with a few notable exceptions:\n// - Since animated values are now coming in via a callback,\n//   we won't guarantee they exist (and default them if not).\n// - Outer scrollable is a ScrollView, not a FlatList\n// TODO: see if we can combine into a single shared `useAutoScroll()` hook\n\nexport function useNestedAutoScroll(params: {\n  activeCellSize?: Animated.SharedValue<number>;\n  autoscrollSpeed?: number;\n  autoscrollThreshold?: number;\n  hoverOffset?: Animated.SharedValue<number>;\n  isDraggingCell?: Animated.SharedValue<number>;\n  isTouchActiveNative?: Animated.SharedValue<number>;\n  panGestureState?: Animated.SharedValue<GestureState | number>;\n}) {\n  const {\n    outerScrollOffset,\n    containerSize,\n    scrollableRef,\n    scrollViewSize,\n  } = useSafeNestableScrollContainerContext();\n\n  const DUMMY_VAL = useSharedValue(0);\n\n  const {\n    hoverOffset = DUMMY_VAL,\n    activeCellSize = DUMMY_VAL,\n    autoscrollSpeed = 100,\n    autoscrollThreshold = 30,\n    isDraggingCell = DUMMY_VAL,\n    isTouchActiveNative = DUMMY_VAL,\n  } = params;\n\n  const hoverScreenOffset = useDerivedValue(() => {\n    return hoverOffset.value - outerScrollOffset.value;\n  }, []);\n\n  const isScrolledUp = useDerivedValue(() => {\n    return outerScrollOffset.value - SCROLL_POSITION_TOLERANCE <= 0;\n  }, []);\n\n  const isScrolledDown = useDerivedValue(() => {\n    return (\n      outerScrollOffset.value + containerSize.value + SCROLL_POSITION_TOLERANCE >=\n      scrollViewSize.value\n    );\n  }, []);\n\n  const distToTopEdge = useDerivedValue(() => {\n    return Math.max(0, hoverScreenOffset.value);\n  }, [hoverScreenOffset]);\n\n  const distToBottomEdge = useDerivedValue(() => {\n    const dist = containerSize.value - (hoverScreenOffset.value + activeCellSize.value)\n    return Math.max(0, dist);\n  }, [hoverScreenOffset, activeCellSize, containerSize]);\n\n  const isAtTopEdge = useDerivedValue(() => {\n    return distToTopEdge.value <= autoscrollThreshold;\n  }, []);\n\n  const isAtBottomEdge = useDerivedValue(() => {\n    return distToBottomEdge.value <= autoscrollThreshold;\n  });\n\n  const scrollTarget = useSharedValue(0);\n\n  useAnimatedReaction(\n    () => {\n      return isDraggingCell.value;\n    },\n    (cur, prev) => {\n      if (cur && !prev) {\n        scrollTarget.value = outerScrollOffset.value;\n      }\n    },\n    [activeCellSize]\n  );\n\n  function scrollToInternal(y: number) {\n    scrollableRef.current?.scrollTo({ y, animated: true });\n  }\n\n  useDerivedValue(() => {\n    const isAtEdge = isAtTopEdge.value || isAtBottomEdge.value;\n    const topDisabled = isAtTopEdge.value && isScrolledUp.value;\n    const bottomDisabled = isAtBottomEdge.value && isScrolledDown.value;\n    const isEdgeDisabled = topDisabled || bottomDisabled;\n\n    const scrollTargetDiff = Math.abs(scrollTarget.value - outerScrollOffset.value);\n    const scrollInProgress = scrollTargetDiff > SCROLL_POSITION_TOLERANCE;\n\n    const shouldScroll =\n      isAtEdge &&\n      !isEdgeDisabled &&\n      isDraggingCell.value &&\n      isTouchActiveNative.value &&\n      !scrollInProgress;\n\n    const distFromEdge = isAtTopEdge.value\n      ? distToTopEdge.value\n      : distToBottomEdge.value;\n    const speedPct = 1 - distFromEdge / autoscrollThreshold;\n    const offset = speedPct * autoscrollSpeed;\n    const targetOffset = isAtTopEdge.value\n      ? Math.max(0, outerScrollOffset.value - offset)\n      : outerScrollOffset.value + offset;\n    if (shouldScroll) {\n      scrollTarget.value = targetOffset;\n      // Reanimated scrollTo is crashing on android. use 'regular' scrollTo until figured out.\n      // scrollTo(scrollViewRef, 0, scrollTarget.value, true)\n      runOnJS(scrollToInternal)(targetOffset);\n    }\n  }, [autoscrollSpeed, autoscrollThreshold, isDraggingCell]);\n\n  return null;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}