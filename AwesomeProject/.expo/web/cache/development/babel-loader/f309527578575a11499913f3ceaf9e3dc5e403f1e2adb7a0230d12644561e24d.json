{"ast":null,"code":"import { runOnJS, useAnimatedReaction, useDerivedValue, useSharedValue } from \"react-native-reanimated\";\nimport { DEFAULT_PROPS, SCROLL_POSITION_TOLERANCE } from \"../constants\";\nimport { useProps } from \"../context/propsContext\";\nimport { useAnimatedValues } from \"../context/animatedValueContext\";\nimport { useRefs } from \"../context/refContext\";\nexport function useAutoScroll() {\n  var _useRefs = useRefs(),\n    flatlistRef = _useRefs.flatlistRef;\n  var _useProps = useProps(),\n    _useProps$autoscrollT = _useProps.autoscrollThreshold,\n    autoscrollThreshold = _useProps$autoscrollT === void 0 ? DEFAULT_PROPS.autoscrollThreshold : _useProps$autoscrollT,\n    _useProps$autoscrollS = _useProps.autoscrollSpeed,\n    autoscrollSpeed = _useProps$autoscrollS === void 0 ? DEFAULT_PROPS.autoscrollSpeed : _useProps$autoscrollS;\n  var _useAnimatedValues = useAnimatedValues(),\n    scrollOffset = _useAnimatedValues.scrollOffset,\n    scrollViewSize = _useAnimatedValues.scrollViewSize,\n    containerSize = _useAnimatedValues.containerSize,\n    activeCellSize = _useAnimatedValues.activeCellSize,\n    hoverOffset = _useAnimatedValues.hoverOffset,\n    activeIndexAnim = _useAnimatedValues.activeIndexAnim;\n  var hoverScreenOffset = useDerivedValue(function () {\n    return hoverOffset.value - scrollOffset.value;\n  }, []);\n  var isScrolledUp = useDerivedValue(function () {\n    return scrollOffset.value - SCROLL_POSITION_TOLERANCE <= 0;\n  }, []);\n  var isScrolledDown = useDerivedValue(function () {\n    return scrollOffset.value + containerSize.value + SCROLL_POSITION_TOLERANCE >= scrollViewSize.value;\n  }, []);\n  var distToTopEdge = useDerivedValue(function () {\n    return Math.max(0, hoverScreenOffset.value);\n  }, []);\n  var distToBottomEdge = useDerivedValue(function () {\n    var hoverPlusActiveCell = hoverScreenOffset.value + activeCellSize.value;\n    return Math.max(0, containerSize.value - hoverPlusActiveCell);\n  }, []);\n  var isAtTopEdge = useDerivedValue(function () {\n    return distToTopEdge.value <= autoscrollThreshold;\n  });\n  var isAtBottomEdge = useDerivedValue(function () {\n    return distToBottomEdge.value <= autoscrollThreshold;\n  }, []);\n  var scrollTarget = useSharedValue(0);\n  var dragIsActive = useDerivedValue(function () {\n    return activeIndexAnim.value >= 0;\n  }, []);\n  useAnimatedReaction(function () {\n    return dragIsActive.value;\n  }, function (cur, prev) {\n    if (cur && !prev) {\n      scrollTarget.value = scrollOffset.value;\n    }\n  });\n  var shouldAutoScroll = useDerivedValue(function () {\n    var scrollTargetDiff = Math.abs(scrollTarget.value - scrollOffset.value);\n    var hasScrolledToTarget = scrollTargetDiff < SCROLL_POSITION_TOLERANCE;\n    var isAtEdge = isAtTopEdge.value || isAtBottomEdge.value;\n    var topDisabled = isAtTopEdge.value && isScrolledUp.value;\n    var bottomDisabled = isAtBottomEdge.value && isScrolledDown.value;\n    var isEdgeDisabled = topDisabled || bottomDisabled;\n    var cellIsActive = activeIndexAnim.value >= 0;\n    return hasScrolledToTarget && isAtEdge && !isEdgeDisabled && cellIsActive;\n  }, []);\n  function scrollToInternal(offset) {\n    if (flatlistRef && \"current\" in flatlistRef) {\n      var _flatlistRef$current;\n      (_flatlistRef$current = flatlistRef.current) === null || _flatlistRef$current === void 0 ? void 0 : _flatlistRef$current.scrollToOffset({\n        offset: offset,\n        animated: true\n      });\n    }\n  }\n  useDerivedValue(function () {\n    if (!shouldAutoScroll.value) return;\n    var distFromEdge = isAtTopEdge.value ? distToTopEdge.value : distToBottomEdge.value;\n    var speedPct = 1 - distFromEdge / autoscrollThreshold;\n    var offset = speedPct * autoscrollSpeed;\n    var targetOffset = isAtTopEdge.value ? Math.max(0, scrollOffset.value - offset) : Math.min(scrollOffset.value + offset, scrollViewSize.value - containerSize.value);\n    scrollTarget.value = targetOffset;\n    runOnJS(scrollToInternal)(targetOffset);\n  }, []);\n  return null;\n}","map":{"version":3,"names":["runOnJS","useAnimatedReaction","useDerivedValue","useSharedValue","DEFAULT_PROPS","SCROLL_POSITION_TOLERANCE","useProps","useAnimatedValues","useRefs","useAutoScroll","_useRefs","flatlistRef","_useProps","_useProps$autoscrollT","autoscrollThreshold","_useProps$autoscrollS","autoscrollSpeed","_useAnimatedValues","scrollOffset","scrollViewSize","containerSize","activeCellSize","hoverOffset","activeIndexAnim","hoverScreenOffset","value","isScrolledUp","isScrolledDown","distToTopEdge","Math","max","distToBottomEdge","hoverPlusActiveCell","isAtTopEdge","isAtBottomEdge","scrollTarget","dragIsActive","cur","prev","shouldAutoScroll","scrollTargetDiff","abs","hasScrolledToTarget","isAtEdge","topDisabled","bottomDisabled","isEdgeDisabled","cellIsActive","scrollToInternal","offset","_flatlistRef$current","current","scrollToOffset","animated","distFromEdge","speedPct","targetOffset","min"],"sources":["/Users/gabriellavukomanovic/Desktop/Summer2023/AwesomeProject/node_modules/react-native-draggable-flatlist/lib/module/hooks/useAutoScroll.tsx"],"sourcesContent":["import {\n  runOnJS,\n  useAnimatedReaction,\n  useDerivedValue,\n  useSharedValue,\n} from \"react-native-reanimated\";\nimport { DEFAULT_PROPS, SCROLL_POSITION_TOLERANCE } from \"../constants\";\nimport { useProps } from \"../context/propsContext\";\nimport { useAnimatedValues } from \"../context/animatedValueContext\";\nimport { useRefs } from \"../context/refContext\";\n\nexport function useAutoScroll() {\n  const { flatlistRef } = useRefs();\n\n  const {\n    autoscrollThreshold = DEFAULT_PROPS.autoscrollThreshold,\n    autoscrollSpeed = DEFAULT_PROPS.autoscrollSpeed,\n  } = useProps();\n\n  const {\n    scrollOffset,\n    scrollViewSize,\n    containerSize,\n    activeCellSize,\n    hoverOffset,\n    activeIndexAnim,\n  } = useAnimatedValues();\n\n  const hoverScreenOffset = useDerivedValue(() => {\n    return hoverOffset.value - scrollOffset.value;\n  }, []);\n\n  const isScrolledUp = useDerivedValue(() => {\n    return scrollOffset.value - SCROLL_POSITION_TOLERANCE <= 0;\n  }, []);\n\n  const isScrolledDown = useDerivedValue(() => {\n    return (\n      scrollOffset.value + containerSize.value + SCROLL_POSITION_TOLERANCE >=\n      scrollViewSize.value\n    );\n  }, []);\n\n  const distToTopEdge = useDerivedValue(() => {\n    return Math.max(0, hoverScreenOffset.value);\n  }, []);\n\n  const distToBottomEdge = useDerivedValue(() => {\n    const hoverPlusActiveCell = hoverScreenOffset.value + activeCellSize.value;\n    return Math.max(0, containerSize.value - hoverPlusActiveCell);\n  }, []);\n\n  const isAtTopEdge = useDerivedValue(() => {\n    return distToTopEdge.value <= autoscrollThreshold;\n  });\n\n  const isAtBottomEdge = useDerivedValue(() => {\n    return distToBottomEdge.value <= autoscrollThreshold;\n  }, []);\n\n  const scrollTarget = useSharedValue(0);\n  const dragIsActive = useDerivedValue(() => {\n    return activeIndexAnim.value >= 0;\n  }, []);\n\n  useAnimatedReaction(\n    () => {\n      return dragIsActive.value;\n    },\n    (cur, prev) => {\n      if (cur && !prev) {\n        scrollTarget.value = scrollOffset.value;\n      }\n    }\n  );\n\n  const shouldAutoScroll = useDerivedValue(() => {\n    const scrollTargetDiff = Math.abs(scrollTarget.value - scrollOffset.value);\n    const hasScrolledToTarget = scrollTargetDiff < SCROLL_POSITION_TOLERANCE;\n\n    const isAtEdge = isAtTopEdge.value || isAtBottomEdge.value;\n    const topDisabled = isAtTopEdge.value && isScrolledUp.value;\n    const bottomDisabled = isAtBottomEdge.value && isScrolledDown.value;\n    const isEdgeDisabled = topDisabled || bottomDisabled;\n\n    const cellIsActive = activeIndexAnim.value >= 0;\n\n    return hasScrolledToTarget && isAtEdge && !isEdgeDisabled && cellIsActive;\n  }, []);\n\n  function scrollToInternal(offset: number) {\n    if (flatlistRef && \"current\" in flatlistRef) {\n      flatlistRef.current?.scrollToOffset({ offset, animated: true });\n    }\n  }\n\n  useDerivedValue(() => {\n    if (!shouldAutoScroll.value) return;\n\n    const distFromEdge = isAtTopEdge.value\n      ? distToTopEdge.value\n      : distToBottomEdge.value;\n    const speedPct = 1 - distFromEdge / autoscrollThreshold!;\n    const offset = speedPct * autoscrollSpeed;\n    const targetOffset = isAtTopEdge.value\n      ? Math.max(0, scrollOffset.value - offset)\n      : Math.min(\n          scrollOffset.value + offset,\n          scrollViewSize.value - containerSize.value\n        );\n\n    scrollTarget.value = targetOffset;\n    // Reanimated scrollTo is crashing on android. use 'regular' scrollTo until figured out.\n    // scrollTo(scrollViewRef, targetX, targetY, true);\n    runOnJS(scrollToInternal)(targetOffset);\n  }, []);\n\n  return null;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}